[{"content":"I recently had to use a query with INSERT ON DUPLICATE KEY UPDATE, but CodeIgniter 4 does not have built-in support for this type of query because it is not available in all database drivers.\nTo start with a basic question - why not use a query with REPLACE? There are several reasons:\n If we are dealing with a table that has a field with AUTO INCREMENT, it is then incremented every time. If we have some foreign key relations with ON DELETE CASCADE option, then this it gonna be a mess, because we will automatically delete data from other tables The last reason is the slowness of queries with REPLACE. Each time we try to perform INSERT, if the data is already there, we perform DELETE operation and then another INSERT.  The INSERT ON DUPLICATE KEY UPDATE query comes to the rescue. It is a remedy for all the above problems.\nOkay, let\u0026rsquo;s see how we can add support for this type of query to CodeIgniter 4. We will create a Trait class:\nnamespace App\\Traits; trait ExtraModelMethods { /** * Insert on duplicate key update * * @param int|string $id Unique key * @param array|object $data Data * @param bool $escape Escape * * @return bool */ public function insertOnDuplicateUpdate($id, $data, bool $escape = null): bool { $data = $this-\u0026gt;transformDataToArray($data, 'update'); $builder = $this-\u0026gt;builder(); $update = $builder-\u0026gt;set($data, '', $escape)-\u0026gt;getCompiledUpdate(false); $insert = $builder-\u0026gt;set($this-\u0026gt;primaryKey, $id, $escape)-\u0026gt;getCompiledInsert(); $update = preg_replace('/UPDATE[\\s\\S]+? SET /', '', $update); return $builder-\u0026gt;db()-\u0026gt;query(sprintf('%s ON DUPLICATE KEY UPDATE %s', $insert, $update)); } } To use the new method in our model we just need to import our Trait class:\nuse App\\Traits\\ExtraModelMethods; use CodeIgniter\\Model; class ExampleModel extends Model { use ExtraModelMethods; } ","permalink":"https://michalsn.dev/posts/insert-on-duplicate-key-update-with-codeigniter-4/","summary":"\u003cp\u003eI recently had to use a query with \u003cstrong\u003eINSERT ON DUPLICATE KEY UPDATE\u003c/strong\u003e, but CodeIgniter 4 does not have built-in support for this type of query because it is not available in all database drivers.\u003c/p\u003e","title":"INSERT ON DUPLICATE KEY UPDATE with CodeIgniter 4"},{"content":"Last time I showed you how to easily integrate Mix with CodeIgniter 4. This time we\u0026rsquo;ll complete the integration process by implementing a helper which will make using versioned assets very convenient and easy.\nWhy do we even need this helper? Mix can generate versioned versions of files. In short, it does this by adding a special string to the file name, as a query string. This string is the checksum for the file. If it changes, it tells the browser that it needs to download the resource again, not use the cache.\nWe need to create a file mix_helper.php in app/helpers/ directory:\nif (! function_exists('mix')) { /** * Get the path to a versioned Mix file. * * @param string $path * @param string $manifestDirectory * * @return string * * @throws Exception */ function mix(string $path, string $manifestDirectory = ''): string { static $manifests = []; $publicPath = ROOTPATH . 'public'; if ($path[0] !== '/') { $path = \u0026quot;/{$path}\u0026quot;; } if ($manifestDirectory \u0026amp;\u0026amp; $manifestDirectory[0] !== '/') { $manifestDirectory = \u0026quot;/{$manifestDirectory}\u0026quot;; } if (is_file($publicPath . $manifestDirectory . '/hot')) { $url = rtrim(file_get_contents($publicPath . $manifestDirectory . '/hot')); $customUrl = config('Mix')-\u0026gt;hotProxyUrl; if (! empty($customUrl)) { return $customUrl . $path; } if (strpos($url , 'http://') === 0 || strpos($url , 'https://') === 0) { return explode(':', $url, 2)[1] . $path; } return \u0026quot;//localhost:8080{$path}\u0026quot;; } $manifestPath = $publicPath . $manifestDirectory . '/mix-manifest.json'; if (! isset($manifests[$manifestPath])) { if (! is_file($manifestPath)) { throw new Exception('The Mix manifest does not exist.'); } $manifests[$manifestPath] = json_decode(file_get_contents($manifestPath), true); } $manifest = $manifests[$manifestPath]; if (! isset($manifest[$path])) { $exception = new Exception(\u0026quot;Unable to locate Mix file: {$path}.\u0026quot;); if (! CI_DEBUG) { return $path; } else { throw $exception; } } return config('Mix')-\u0026gt;url . $manifestDirectory . $manifest[$path]; } } Next, we create the Mix.php configuration file in the app/config/ directory:\n\u0026lt;?php namespace Config; use CodeIgniter\\Config\\BaseConfig; class Mix extends BaseConfig { /** * Url for CDN. * Leave empty if using local files. * * @var string */ public $url = ''; /** * Hot reload Url. * Leave empty for default localhost:8080. * * @var string */ public $hotProxyUrl = ''; } There is a good chance that you won\u0026rsquo;t need to change anything in the configuration file, because you will only be using local resources, but you can change a few settings if you need to.\nHow to use this helper? It\u0026rsquo;s very simple - just enter an ordinary file name and helper will add appropriate query string, based on mix-manifest.json file generated during asset compilation.\nThis is what our asset configuration file will look like (webpack.mix.js):\nlet mix = require('laravel-mix'); mix.js('resources/js/app.js', 'js') .postCss('resources/css/app.css', 'css') .version() .setPublicPath('public'); And in our view we will apply a helper:\n\u0026lt;link href=\u0026quot;\u0026lt;?= mix('/css/app.css'); ?\u0026gt;\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; This will get a link similar to this one:\n\u0026lt;link href=\u0026quot;/css/app.css?id=a8b3deb4b7d26dcf51d2\u0026quot; rel=\u0026quot;stylesheet\u0026quot;\u0026gt; The same for JS files. Without the helper we would have to manually rename the versioned files every time.\n","permalink":"https://michalsn.dev/posts/codeigniter-4-mix-versioning/","summary":"\u003cp\u003eLast time I showed you how to easily integrate Mix with CodeIgniter 4. This time we\u0026rsquo;ll complete the integration process by implementing a helper which will make using versioned assets very convenient and easy.\u003c/p\u003e","title":"CodeIgniter 4 + Mix with versioning"},{"content":"Today we are going to look at configuring CodeIgniter 4 in conjunction with Mix. Mix is one of the components that comes with the Laravel framework.\nThe first thing we do is install CodeIgniter 4 using the command:\ncomposer create-project codeigniter4/appstarter codeigniter-mix --no-dev Next, we need to add Mix, which is basically an overlay of webpack. Basically, it would be enough to initialize Mix this way:\nnpm init -y npm install laravel-mix --save-dev But instead, I will provide the contents of the entire package.json file:\n{ \u0026quot;private\u0026quot;: true, \u0026quot;scripts\u0026quot;: { \u0026quot;dev\u0026quot;: \u0026quot;npm run development\u0026quot;, \u0026quot;development\u0026quot;: \u0026quot;mix\u0026quot;, \u0026quot;watch\u0026quot;: \u0026quot;mix watch\u0026quot;, \u0026quot;watch-poll\u0026quot;: \u0026quot;mix watch -- --watch-options-poll=1000\u0026quot;, \u0026quot;hot\u0026quot;: \u0026quot;mix watch --hot\u0026quot;, \u0026quot;prod\u0026quot;: \u0026quot;npm run production\u0026quot;, \u0026quot;production\u0026quot;: \u0026quot;mix --production\u0026quot; }, \u0026quot;devDependencies\u0026quot;: { \u0026quot;axios\u0026quot;: \u0026quot;^0.21\u0026quot;, \u0026quot;laravel-mix\u0026quot;: \u0026quot;^6.0.6\u0026quot;, \u0026quot;lodash\u0026quot;: \u0026quot;^4.17.19\u0026quot;, \u0026quot;postcss\u0026quot;: \u0026quot;^8.1.14\u0026quot; } } This file must be initialized via the command:\nnpm install All the necessary components will be installed. All that remains is to create the webpack.mix.js file, which will allow us to define the various steps when compiling the JS and CSS files.\nlet mix = require('laravel-mix'); mix.js('resources/js/app.js', 'js') .postCss('resources/css/app.css', 'css', [ // ]) .setPublicPath('public'); Now we need to take care of the proper folder structure. In the main directory, where CodeIgniter is located, we create resources directory. Our JS and CSS files will be located there - in js and css directories respectively.\nIn the js directory, we create the bootstrap.js file with the following content:\nwindow._ = require('lodash'); window.axios = require('axios'); window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'; And then the app.js file, with the contents:\nrequire('./bootstrap'); The whole thing should look more or less like this:\n/public /js - app.js /css - app.css /resources /js - app.js - bootstrap.js /css - app.css Now we can compile everything using the command:\nnpx mix or for the production version:\nnpx mix -p ","permalink":"https://michalsn.dev/posts/codeigniter-4-mix/","summary":"\u003cp\u003eToday we are going to look at configuring CodeIgniter 4 in conjunction with \u003ca href=\"https://laravel.com/docs/8.x/mix\"\u003eMix\u003c/a\u003e. Mix is one of the components that comes with the Laravel framework.\u003c/p\u003e","title":"CodeIgniter 4 + Mix"},{"content":"Integration with Auth0 is quite simple and comes down to a few steps. I assume you already have your Auth0 account so you just need to install the library via Composer:\ncomposer require auth0/auth0-php To get started, we need to create a configuration file app/Config/Auth0.php. It is a good idea to leave the configuration values in the file empty and add them via the .env file. This will ensure that your sensitive data doesn\u0026rsquo;t end up in the repository.\n\u0026lt;?php namespace Config; use CodeIgniter\\Config\\BaseConfig; class Auth0 extends BaseConfig { public $domain = 'your domain'; public $clientId = 'your client id'; public $clientSecret = 'your client secret'; public $redirectUri = 'redirect url'; public $scope = 'scope'; } Next, we\u0026rsquo;ll create the main class that will allow Auth0 to write data to the session. To do this, we will implement the interface provided by Auth0. We need to create a file: app/Libraries/Auth0SessionStorage:\n\u0026lt;?php namespace App\\Libraries; use Auth0\\SDK\\Store\\StoreInterface; class Auth0SessionStore implements StoreInterface { /** * Session object * * @var \\CodeIgniter\\Session\\Session; */ protected $session; /** * Session variable prefix * * @var string */ protected $prefix = 'auth0_'; /** * CodeIgniterSessionStore constructor. */ public function __construct() { $this-\u0026gt;session = service('session'); } /** * Persists $value on $_SESSION, identified by $key. * * @param string $key Session key to set. * @param mixed $value Value to use. * * @return void */ public function set(string $key, $value): void { $this-\u0026gt;session-\u0026gt;set($this-\u0026gt;prefix . $key, $value); } /** * Gets persisted values identified by $key. * If the value is not set, returns $default. * * @param string $key Session key to set. * @param mixed $default Default to return if nothing was found. * * @return mixed */ public function get(string $key, $default = null) { return $this-\u0026gt;session-\u0026gt;get($this-\u0026gt;prefix . $key) ?? $default; } /** * Removes a persisted value identified by $key. * * @param string $key Session key to delete. * * @return void */ public function delete(string $key): void { $this-\u0026gt;session-\u0026gt;remove($this-\u0026gt;prefix . $key); } } The last step is to create a service to handle everything conveniently. Let\u0026rsquo;s edit app/Config/Services.php file:\n\u0026lt;?php namespace Config; use Auth0\\SDK\\Auth0; use Auth0\\SDK\\Exception\\CoreException; use App\\Libraries\\Auth0SessionStore; use Config\\Services as BaseService; class Services extends BaseService { /** * The Auth0 service. * * @param boolean $getShared * * @return Auth0 * @throws CoreException */ public static function auth0(bool $getShared = true) { if ($getShared) { return static::getSharedInstance('auth0'); } $config = config('Auth0'); $config = [ 'domain' =\u0026gt; $config-\u0026gt;domain, 'client_id' =\u0026gt; $config-\u0026gt;clientId, 'client_secret' =\u0026gt; $config-\u0026gt;clientSecret, 'redirect_uri' =\u0026gt; $config-\u0026gt;redirectUri, 'scope' =\u0026gt; $config-\u0026gt;scope, 'store' =\u0026gt; new Auth0SessionStore(), ]; return new Auth0($config); } } All that\u0026rsquo;s left is to test the whole thing and create a controller app/Controllers/Auth.php.\nnamespace App\\Controllers; class Auth extends BaseController { public function callback() { return view('auth', ['user' =\u0026gt; service('auth0')-\u0026gt;getUser()]); } public function login() { service('auth0')-\u0026gt;login(); } public function logout() { $config = config('auth0'); service('auth0')-\u0026gt;logout(); $logoutUrl = sprintf('https://%s/v2/logout?client_id=%s\u0026amp;returnTo=%s', $config-\u0026gt;domain, $config-\u0026gt;clientId, site_url()); $this-\u0026gt;response-\u0026gt;setHeader('Location', $logoutUrl); } } And then there\u0026rsquo;s the app/Views/auth.php view:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Auth0 Sample\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php if ($user): ?\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;?= $user['name']; ?\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;\u0026lt;?= site_url('auth/logout'); ?\u0026gt;\u0026quot;\u0026gt;Logout\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php else: ?\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;\u0026lt;?= site_url('auth/login'); ?\u0026gt;\u0026quot;\u0026gt;Login\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://michalsn.dev/posts/integrating-codeigniter-4-with-auth0/","summary":"\u003cp\u003eIntegration with \u003ca href=\"https://auth0.com/\"\u003eAuth0\u003c/a\u003e is quite simple and comes down to a few steps. I assume you already have your Auth0 account so you just need to install the library via \u003ca href=\"https://getcomposer.org/\"\u003eComposer\u003c/a\u003e:\u003c/p\u003e","title":"Integrating CodeIgniter 4 with Auth0"},{"content":"Uploading files directly to S3 requires a few changes to the way Dropzone handles uploads, but it\u0026rsquo;s nothing particularly difficult.\nWhat we will need?\n Dropzone.js SparkMD5 CodeIgniter 4 AWS SDK for PHP  Let\u0026rsquo;s start by initializing Dropzone - the key method here is transformFile, which will make us get a presigned URL.\nconst baseUrl = '\u0026lt;?= base_url(); ?\u0026gt;'; myDropzone = new Dropzone('#myDropzone', { acceptedFiles: \u0026quot;image/jpeg,image/jpg\u0026quot;, clickable: \u0026quot;.select-photos-btn\u0026quot;, maxFilesize: 100, url: '#', method: 'post', timeout: 0, thumbnailMethod: 'crop', resizeQuality: 0.9, transformFile: async function (file, done) { file.md5 = await calculateMD5(file); let initData = await initUpload(file.name, file.type, file.md5); file.presign = initData.presign; file.fileName = initData.name; done(file); } }); Let\u0026rsquo;s take a look at the calculateMD5 function. We need it to be sure that the uploaded file was uploaded correctly - it\u0026rsquo;s our checksum.\nfunction calculateMD5(blob) { return new Promise(function (resolve, reject) { let reader = new FileReader(); reader.readAsBinaryString(blob); reader.onloadend = function () { let hash = btoa(SparkMD5.hashBinary(reader.result, true)); resolve(hash); }; }); } Once we have calculated the checksum, we can initiate the file upload:\nfunction initUpload(name, contentType, md5) { return new Promise(function (resolve, reject) { $.ajax({ url: baseUrl + 'home/init_upload', data: {'file': name, 'content_type': contentType, 'md5': md5}, headers: {'X-Requested-With': 'XMLHttpRequest'}, type: 'POST' }) .done(function (respond) { if (respond.status) { resolve(respond.data); } else { reject() } }) .fail(function () { reject() }); }); } It\u0026rsquo;s time for the server part. For this, we need to install CodeIgniter 4 and the AWS library:\ncomposer create-project codeigniter4/appstarter codeigniter-dropzonejs --no-dev composer require aws/aws-sdk-php In the Home controller, we need to create a init_upload method. This method will be quite large. We could avoid it, for example, by creating a special Service to handle tasks related to S3, but because the example is to be as basic as possible, we will put everything in one place:\nuse App\\Controllers\\BaseController; use Aws\\S3\\PostObjectV4; use Aws\\S3\\S3Client; use CodeIgniter\\Exceptions\\PageNotFoundException; class Home extends BaseController { ... public function init_upload() { if (! $this-\u0026gt;request-\u0026gt;isAjax()) { throw new PageNotFoundException(); } if ($this-\u0026gt;request-\u0026gt;getMethod() !== 'post') { throw new PageNotFoundException(); } if (! $file = $this-\u0026gt;request-\u0026gt;getPost('file')) { throw new PageNotFoundException(); } if (! $contentType = $this-\u0026gt;request-\u0026gt;getPost('content_type')) { throw new PageNotFoundException(); } if (! $md5 = $this-\u0026gt;request-\u0026gt;getPost('md5')) { throw new PageNotFoundException(); } if (! in_array($contentType, ['image/jpeg', 'image/jpg'])) { throw new PageNotFoundException(); } $file = service('security')-\u0026gt;sanitizeFilename($file); $client = new S3Client([ 'version' =\u0026gt; 'latest', 'region' =\u0026gt; 'type your S3 region here', 'signature' =\u0026gt; 'v4', 'credentials' =\u0026gt; [ 'key' =\u0026gt; 'type your aws key here', 'secret' =\u0026gt; 'type your aws secret here', ], ]); $bucket = 'type your bucket name here'; $formInputs = [ 'acl' =\u0026gt; 'private', 'key' =\u0026gt; $file, 'success_action_status' =\u0026gt; '201', 'content-md5' =\u0026gt; $md5, 'content-type' =\u0026gt; $contentType, ]; $options = [ ['acl' =\u0026gt; 'private'], ['bucket' =\u0026gt; $bucket], ['success_action_status' =\u0026gt; '201'], ['content-md5' =\u0026gt; $md5], ['content-type' =\u0026gt; $contentType], ['content-length-range', 0, 1024 * 1024 * 100], ['starts-with', '$key', $file], ]; $postObject = new PostObjectV4( $client, $bucket, $formInputs, $options, '+15 minutes' ); $formAttributes = $postObject-\u0026gt;getFormAttributes(); $formInputs = $postObject-\u0026gt;getFormInputs(); return $this-\u0026gt;response-\u0026gt;setJSON([ 'status' =\u0026gt; 1, 'data' =\u0026gt; [ 'name' =\u0026gt; $file, 'presign' =\u0026gt; [ 'attributes' =\u0026gt; $attributes, 'inputs' =\u0026gt; $inputs ] ] ]); } } Once we have the presigned URL generated, we need to force Dropzone to use it when uploading the file. We also need to include additional fields and attributes that will describe the exact file we are uploading. We do it this way:\nmyDropzone.on(\u0026quot;sending\u0026quot;, function (file, xhr, formData) { xhr.open(this.options.method, file.presign.attributes.action, true); Object.keys(file.presign.inputs).forEach(function (key) { formData.append(key, file.presign.inputs[key]); }); let _send = xhr.send xhr.send = function () { _send.call(xhr, formData) } }); All that remains now is to handle the success or failure of the upload. In the case of success, we need to change the final name of the file, which may have changed if the name contained forbidden characters:\nmyDropzone.on(\u0026quot;success\u0026quot;, function (file) { let elem = $(file.previewElement); elem.find('div[data-dz-name]').text(file.fileName); }); If an error is returned, we should also display an appropriate message. For this purpose, we need to parse the XML response:\nmyDropzone.on(\u0026quot;error\u0026quot;, function (file, message) { if (file \u0026amp;\u0026amp; message) { if (message.startsWith('\u0026lt;?xml version')) { const search = /\u0026lt;Message\u0026gt;(.*?)\u0026lt;\\/Message\u0026gt;/g.exec(message); message = search[1]; this.emit(\u0026quot;error\u0026quot;, file, message); } } }); This way we can prepare a special upload link and upload the file to S3 using Dropzone.js. Then, S3 will verify the integrity of the file and check that it has the correct parameters that were specified when the special signed URL was generated.\n","permalink":"https://michalsn.dev/posts/upload-files-directly-to-s3-with-dropzonejs-and-codeigniter-4/","summary":"\u003cp\u003eUploading files directly to S3 requires a few changes to the way Dropzone handles uploads, but it\u0026rsquo;s nothing particularly difficult.\u003c/p\u003e","title":"Upload files directly to S3 with Dropzone.js"},{"content":"Up until now, working with UUIDs and CodeIgniter 4 hasn\u0026rsquo;t been much fun, but that has now changed with the codeigniter4-uuid library.\nAdmittedly, working with UUID was not a big challenge when we were working with the Model class, but in order to do it \u0026ldquo;nicely\u0026rdquo;, we had to use Model Events. Everything would be fine until our application itself would not need to use Model Events. Then it would be a mess, because we would have to add UUID support to our existing Events code.\nThat is why a special library was created, which extends Model class and gives possibility to work with UUID. No matter if we want to store identifiers as text or bytes - everything is handled automatically.\nInstallation via composer:\ncomposer require michalsn/codeigniter4-uuid Then the only change we need to make is in the Model:\n\u0026lt;?php namespace App\\Models; use Michalsn\\Uuid\\UuidModel; class MyModel extends UuidModel { ... } This is enough to use UUIDs automatically for the primary key.\n","permalink":"https://michalsn.dev/posts/uuid-with-codeigniter-4/","summary":"\u003cp\u003eUp until now, working with UUIDs and CodeIgniter 4 hasn\u0026rsquo;t been much fun, but that has now changed with the \u003ca href=\"https://github.com/michalsn/codeigniter4-uuid\"\u003ecodeigniter4-uuid\u003c/a\u003e library.\u003c/p\u003e","title":"UUID with CodeIgniter 4"}]