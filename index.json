[{"content":"While LLMs, such as the popular GPT family models, are incredibly advanced, they do have their limitations. Primarily, they rely on a static set of knowledge learned during their training phase, which means they might lack specific knowledge on certain topics.\nOne of the key concepts in working with textual data is embeddings. These are representations of text in a dense vector space, where similar items are mapped to nearby points. This technique effectively captures the semantic meaning of words, phrases, and even larger text structures like sentences and paragraphs.\nThis is where Retrieval Augmented Generation (RAG) makes a significant difference. RAG combines information retrieval techniques with text generation, enabling AI to create content based on information it finds in a custom database or text collection. This means more accurate and contextually relevant outputs, tailored to the specific needs of users.\nLet\u0026rsquo;s create sample code, using Ollama, embedding and PHP:\ncomposer require codewithkyrian/chromadb-php modelflow-ai/ollama First we have to seed our data:\n\u0026lt;?php declare(strict_types=1); use Codewithkyrian\\ChromaDB\\ChromaDB; use ModelflowAi\\Ollama\\Ollama; require_once __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; $chromaDB = ChromaDB::client(); $client = Ollama::client(); $documents = [ \u0026#34;Llamas are members of the camelid family meaning they\u0026#39;re pretty closely related to vicu√±as and camels\u0026#34;, \u0026#34;Llamas were first domesticated and used as pack animals 4,000 to 5,000 years ago in the Peruvian highlands\u0026#34;, \u0026#34;Llamas can grow as much as 6 feet tall though the average llama between 5 feet 6 inches and 5 feet 9 inches tall\u0026#34;, \u0026#34;Llamas weigh between 280 and 450 pounds and can carry 25 to 30 percent of their body weight\u0026#34;, \u0026#34;Llamas are vegetarians and have very efficient digestive systems\u0026#34;, \u0026#34;Llamas live to be about 20 years old, though some only live for 15 years and others live to be 30 years old\u0026#34;, ]; $collection = $chromaDB-\u0026gt;createCollection(\u0026#39;test-collection\u0026#39;); foreach ($documents as $id =\u0026gt; $doc) { $response = $client-\u0026gt;embeddings()-\u0026gt;create([ \u0026#39;model\u0026#39; =\u0026gt; \u0026#39;mxbai-embed-large\u0026#39;, \u0026#39;prompt\u0026#39; =\u0026gt; $doc, ]); $collection-\u0026gt;add( ids: [$id], embeddings: [$response-\u0026gt;embedding], documents: [$doc], ); } Now we can use the data as a context for our prompts:\n\u0026lt;?php declare(strict_types=1); use Codewithkyrian\\ChromaDB\\ChromaDB; use ModelflowAi\\Ollama\\Ollama; require_once __DIR__ . \u0026#39;/vendor/autoload.php\u0026#39;; $chromaDB = ChromaDB::client(); $client = Ollama::client(); $collection = $chromaDB-\u0026gt;getCollection(\u0026#39;test-collection\u0026#39;); $prompt = \u0026#39;What animals are llamas related to?\u0026#39;; $response = $client-\u0026gt;embeddings()-\u0026gt;create([ \u0026#39;model\u0026#39; =\u0026gt; \u0026#39;mxbai-embed-large\u0026#39;, \u0026#39;prompt\u0026#39; =\u0026gt; $prompt, ]); $queryResponse = $collection-\u0026gt;query( queryEmbeddings: [$response-\u0026gt;embedding], nResults: 1, include: [\u0026#39;documents\u0026#39;], ); $data = $queryResponse-\u0026gt;documents[0][0]; $completionResponse = $client-\u0026gt;completion()-\u0026gt;create([ \u0026#39;model\u0026#39; =\u0026gt; \u0026#39;llama2\u0026#39;, \u0026#39;prompt\u0026#39; =\u0026gt; \u0026#34;Using this data: $data. Respond to this prompt: $prompt\u0026#34;, ]); echo \u0026#39;Prompt: \u0026#39; . $prompt; echo \u0026#39;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; echo \u0026#39;Data: \u0026#39; . $data; echo \u0026#39;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; echo \u0026#39;Response:\u0026#39;; echo \u0026#39;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#39;; echo $completionResponse-\u0026gt;response; ","permalink":"https://michalsn.dev/posts/working-with-php-ollama-and-embeddings/","summary":"While LLMs, such as the popular GPT family models, are incredibly advanced, they do have their limitations. Primarily, they rely on a static set of knowledge learned during their training phase, which means they might lack specific knowledge on certain topics.\nOne of the key concepts in working with textual data is embeddings. These are representations of text in a dense vector space, where similar items are mapped to nearby points.","title":"Working with PHP, Ollama and embeddings"},{"content":"Markdown Pages project allows you to map Markdown files to collections and easily list or read data from them.\nIn addition to the Markdown parser, we also have the ability to parse YAML sections, where you can put a lot of useful information.\nHow to start:\ncomposer michalsn/codeigniter-markdown-pages Basic usage:\n$markdownPages = service(\u0026#39;markdownpages\u0026#39;, ROOTPATH . \u0026#39;pages\u0026#39;); // Get the first directory $dir = $markdownPages-\u0026gt;dirs()-\u0026gt;first(); echo $dir-\u0026gt;getName() // prints: Quick Start echo $dir-\u0026gt;getSlug() // prints: quick-start foreach($dir-\u0026gt;getFiles()-\u0026gt;items() as $file) { echo $file-\u0026gt;getName(); // prints: Installation echo $file-\u0026gt;getSlug(); // prints: installation echo $file-\u0026gt;getPath(); // prints: quick-start/installation echo $content-\u0026gt;parse()-\u0026gt;getContent(); // prints: parsed markdown from file echo $content-\u0026gt;parse()-\u0026gt;getMeta(); // prints: parsed YAML as key -\u0026gt; value } This project use Collection class pretty much everywhere so please get familiar with it to use this package comfortably.\nThe full documentation is available here.\n","permalink":"https://michalsn.dev/posts/codeigniter-markdown-pages/","summary":"Markdown Pages project allows you to map Markdown files to collections and easily list or read data from them.\nIn addition to the Markdown parser, we also have the ability to parse YAML sections, where you can put a lot of useful information.\nHow to start:\ncomposer michalsn/codeigniter-markdown-pages Basic usage:\n$markdownPages = service(\u0026#39;markdownpages\u0026#39;, ROOTPATH . \u0026#39;pages\u0026#39;); // Get the first directory $dir = $markdownPages-\u0026gt;dirs()-\u0026gt;first(); echo $dir-\u0026gt;getName() // prints: Quick Start echo $dir-\u0026gt;getSlug() // prints: quick-start foreach($dir-\u0026gt;getFiles()-\u0026gt;items() as $file) { echo $file-\u0026gt;getName(); // prints: Installation echo $file-\u0026gt;getSlug(); // prints: installation echo $file-\u0026gt;getPath(); // prints: quick-start/installation echo $content-\u0026gt;parse()-\u0026gt;getContent(); // prints: parsed markdown from file echo $content-\u0026gt;parse()-\u0026gt;getMeta(); // prints: parsed YAML as key -\u0026gt; value } This project use Collection class pretty much everywhere so please get familiar with it to use this package comfortably.","title":"CodeIgniter Markdown Pages"},{"content":"While CodeIgniter 4 itself doesn\u0026rsquo;t have a built-in queue system, I have built one which rely on the database handler.\nBut what is a queue? It\u0026rsquo;s a system that allows you to schedule and manage background tasks or jobs to be executed in the given order. These jobs can include sending emails, processing data, generating reports, and more. Using a queue system helps offload time-consuming or resource-intensive tasks from the main application, ensuring that the application remains responsive.\nHere is the project repo.\nUpdate 15/12/2023: This project has become the official CodeIgniter Queue project. The repository has been moved to the CodeIgniter4 organization.\nFirst things first. Let\u0026rsquo;s install the package:\ncomposer require michalsn/codeigniter-queue And migrate our database:\nphp spark migrate --all Last thing, during installation is to publish our config file:\nphp spark queue:publish Now, we can create our first Job:\nphp spark queue:job Example And implement our example job in the process method:\n// ... class Example extends BaseJob implements JobInterface { public function process() { $email = service(\u0026#39;email\u0026#39;, null, false); $result = $email -\u0026gt;setTo(\u0026#39;sample@email.com\u0026#39;) -\u0026gt;setSubject(\u0026#39;Sample subject\u0026#39;) -\u0026gt;setMessage($this-\u0026gt;data[\u0026#39;message\u0026#39;]) -\u0026gt;send(false); if (! $result) { throw new Exception($email-\u0026gt;printDebugger(\u0026#39;headers\u0026#39;)); } return $result; } } This job will just send an email. The only variable is a message, which is available via the $this-\u0026gt;data class variable. If sending an email will not be successful, the exception will be thrown. This will indicate that the job failed.\nTo make this job available, we have to add it to the $jobHandlers array in the app\\Config\\Queue.php file.\n// ... use App\\Jobs\\Example; // ... public array $jobHandlers = [ \u0026#39;my-example\u0026#39; =\u0026gt; Example::class ]; // ... This is how we will add our job to the queue:\nservice(\u0026#39;queue\u0026#39;)-\u0026gt;push(\u0026#39;queueName\u0026#39;, \u0026#39;my-example\u0026#39;, [\u0026#39;message\u0026#39; =\u0026gt; \u0026#39;Hello there\u0026#39;]); To start executing the jobs, we have to start the worker:\nphp spark queue:work queueName That\u0026rsquo;s pretty much it. There are many additional option and ways to run a queue worker, though.\nTo learn more you can check the docs.\n","permalink":"https://michalsn.dev/posts/codeigniter-queue/","summary":"While CodeIgniter 4 itself doesn\u0026rsquo;t have a built-in queue system, I have built one which rely on the database handler.\nBut what is a queue? It\u0026rsquo;s a system that allows you to schedule and manage background tasks or jobs to be executed in the given order. These jobs can include sending emails, processing data, generating reports, and more. Using a queue system helps offload time-consuming or resource-intensive tasks from the main application, ensuring that the application remains responsive.","title":"CodeIgniter Queue"},{"content":"Tags provide a way to organize content and improve the user\u0026rsquo;s experience by helping them discover related articles and navigate through a website\u0026rsquo;s content more efficiently. They are particularly useful in content-heavy websites or blogs where there\u0026rsquo;s a wide range of topics and subjects covered. This blog also uses tags system. These tags help categorize and organize content to make it more accessible and searchable.\nSince there was no tags library for CodeIgniter 4, I decided to write one. The codeigniter-tags is designed to work with many content types at once, so we can use it in many models.\nInstallation via composer is very simple:\ncomposer require michalsn/codeigniter-tags After that we just need to migrate our database:\nphp spark migrate --all Now the only thing left is to initialize the library in our model:\nclass ExampleModel extends BaseModel { use HasTags; // ... protected function initialize() { $this-\u0026gt;initTags(); } // ... } We use HasTags trait and $this-\u0026gt;initTags() to initialize tags.\nNow we have a handy way add tags to our entry, just by specifying them as a string or array:\nmodel(ExampleModel::class)-\u0026gt;save([ \u0026#39;id\u0026#39; =\u0026gt; 1, // this is our field with tags // we can also set it as an array: [\u0026#39;tag1\u0026#39;, \u0026#39;tag2\u0026#39;] \u0026#39;tags\u0026#39; =\u0026gt; \u0026#39;tag1,tag2\u0026#39;, ]); We can also get the entries with tags assigned to them:\nmodel(ExampleModel::class)-\u0026gt;withTags()-\u0026gt;findAll(); For more detailed info, you can see the docs.\n","permalink":"https://michalsn.dev/posts/codeigniter-tags/","summary":"Tags provide a way to organize content and improve the user\u0026rsquo;s experience by helping them discover related articles and navigate through a website\u0026rsquo;s content more efficiently. They are particularly useful in content-heavy websites or blogs where there\u0026rsquo;s a wide range of topics and subjects covered. This blog also uses tags system. These tags help categorize and organize content to make it more accessible and searchable.\nSince there was no tags library for CodeIgniter 4, I decided to write one.","title":"CodeIgniter Tags"},{"content":"Auth0 is a cloud-based service that helps developers add secure user authentication and authorization features to their applications without having to build these components from scratch. Auth0 is designed to simplify the process of implementing user authentication, including features like single sign-on (SSO), multi-factor authentication (MFA), and social login.\nAuth0 allows you to add basic authentication functionality very quickly by delegating it to an external platform, but we should always consider whether such a solution definitely suits us.\nIn the past I have written about the integration of CodeIgniter 4 and the auth0 v7 package, but now I wanted to present the package I created for v8.\nYou can head over to the repo to read the instructions.\nInstallation via composer is always simple:\ncomposer require michalsn/codeigniter-auth0 composer require guzzlehttp/guzzle guzzlehttp/psr7 http-interop/http-factory-guzzle Migrate the database. This library also creates its own users table in the database, so if you already have such a table, consider having the same field names in your version.\nphp spark migrate --all The next step is to publish the Auth0 config file into our app namespace:\nphp spark auth0:publish Now we can set all the credentials to our Auth0 account in app\\Config\\Auth0.php file. See the getting started article for reference.\ncodeigniter-auth0 comes with the predefined routes to login, logout and receiving a callback calls.\nTo check if user is authenticated, we can use auth0Stateful filter or write our own implementation.\nWe can also just check this in every request or controller via simple:\nif (! service(\u0026#39;auth0\u0026#39;)-\u0026gt;isAuthenticated()) { // ... } ","permalink":"https://michalsn.dev/posts/auth0-codeigniter-4-package/","summary":"Auth0 is a cloud-based service that helps developers add secure user authentication and authorization features to their applications without having to build these components from scratch. Auth0 is designed to simplify the process of implementing user authentication, including features like single sign-on (SSO), multi-factor authentication (MFA), and social login.\nAuth0 allows you to add basic authentication functionality very quickly by delegating it to an external platform, but we should always consider whether such a solution definitely suits us.","title":"Auth0 CodeIgniter 4 package"},{"content":"Kinde is an identity and access management platform that provides authentication and authorization services for web applications. It\u0026rsquo;s one of the direct auth0 competitors.\nThe first thing that strikes you from the business side is that we get more options in the free version as well as higher limits for active users. It is also less expensive than auth0 when we finally reach the free limits. For startups that often use a cloud-based authentication model, this is a significant convenience.\nAnyway, back to the library. Installation of codeigniter-kinde is pretty basic:\ncomposer require michalsn/codeigniter-kinde Then we have to migrate our database. This library comes with the ready to use users table, so if you have your own users table, be sure to implement all fields that exists in this package.\nphp spark migrate --all Now we have to copy a config file to our\u0026rsquo;s app namespace:\nphp spark kinde:publish The last thing is to fill the config file with our credentials. You can read more about it in the getting started article.\nThis package comes with predefined routes to: login, register, logout and for the callback URL (which is used to finalize authentication). The best part is that you don\u0026rsquo;t have to do anything but just use this URL\u0026rsquo;s in your app. Since login and registration are done via Kinde site, everything is ready to use just few seconds after we fill the config file.\nWe also have a universal kinde filter that can serve as a guard for your app.\nWe can also check things manually in the controller if we want. If we decide to define the permissions, we can also check for them very easy:\nif (authenticated() \u0026amp;\u0026amp; can(\u0026#39;edit_post\u0026#39;)) { // ... } ","permalink":"https://michalsn.dev/posts/using-kinde-with-codeigniter-4/","summary":"Kinde is an identity and access management platform that provides authentication and authorization services for web applications. It\u0026rsquo;s one of the direct auth0 competitors.\nThe first thing that strikes you from the business side is that we get more options in the free version as well as higher limits for active users. It is also less expensive than auth0 when we finally reach the free limits. For startups that often use a cloud-based authentication model, this is a significant convenience.","title":"Using Kinde with CodeIgniter 4"},{"content":"Signing URLs may be very useful when we want to prevent manual URL manipulation or when the given address should have an expiration date. CodeIgniter Signed URL package makes it very easy.\nI have build this library for one particular reason. Some time ago I started experimenting with HTMX and Controlled Cells. These last one will be introduced in CodeIgniter 4.3.\nAnyway, I created some really basic counter component. You can find it in the HTMX demos repo. And one think bodered me. Setting the starting number for the counter was very easy, but what wasn\u0026rsquo;t so easy was setting a custom number by which the counter would increment. Let\u0026rsquo;s see the example:\n\u0026lt;?php namespace Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter; use CodeIgniter\\View\\Cells\\Cell; class CounterCell extends Cell { public $count = 0; /** * Increment * * @return void */ public function increment() { $this-\u0026gt;count++; return $this-\u0026gt;render(); } /** * Decrement * * @return void */ public function decrement() { $this-\u0026gt;count--; return $this-\u0026gt;render(); } } The view part:\n... \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; value=\u0026#34;\u0026lt;?= $count; ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; hx-get=\u0026#34;\u0026lt;?= site_url(\u0026#39;cells/counter/increment?count=\u0026#39; . $count); ?\u0026gt;\u0026#34; hx-swap=\u0026#34;morph:outerHTML\u0026#34; hx-target=\u0026#34;closest .card\u0026#34;\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn btn-secondary\u0026#34; type=\u0026#34;button\u0026#34; hx-get=\u0026#34;\u0026lt;?= site_url(\u0026#39;cells/counter/decrement?count=\u0026#39; . $count); ?\u0026gt;\u0026#34; hx-swap=\u0026#34;morph:outerHTML\u0026#34; hx-target=\u0026#34;closest .card\u0026#34;\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... And the initial component call, with two separate instances:\n... \u0026lt;div class=\u0026#34;row justify-content-md-center mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-sm-6 col-lg-3\u0026#34;\u0026gt; \u0026lt;?= view_cell(\u0026#39;Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter\\CounterCell\u0026#39;); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-sm-6 col-lg-3\u0026#34;\u0026gt; \u0026lt;?= view_cell(\u0026#39;Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter\\CounterCell\u0026#39;, [\u0026#39;count\u0026#39; =\u0026gt; 5]); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... Your first impression would be probably something like - that\u0026rsquo;s quite easy task. Just add another variable, like $incrementNumber and call it a day. Well\u0026hellip; yes and no.\nIf we leave it just like that, anyone will be able to edit the URL and increment counter by any number. The point is that we don\u0026rsquo;t want users to be able to change the number by which we will increment the counter in an instance. And this is the time when Signed URLs come to the rescue.\nLet\u0026rsquo;s edit Controlled Cell first:\n\u0026lt;?php namespace Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter; use CodeIgniter\\View\\Cells\\Cell; class CounterCell extends Cell { public $count = 0; public $incrementNumber = 1; /** * Increment * * @return void */ public function increment() { $this-\u0026gt;count += $this-\u0026gt;incrementNumber; return $this-\u0026gt;render(); } /** * Decrement * * @return void */ public function decrement() { $this-\u0026gt;count -= $this-\u0026gt;incrementNumber; return $this-\u0026gt;render(); } } Now the view part. We will change the way URLs are generated with call to the signedurl() helper:\n... \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; value=\u0026#34;\u0026lt;?= $count; ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; hx-get=\u0026#34;\u0026lt;?= signedurl()-\u0026gt;siteUrl(\u0026#39;cells/counter/increment?count=\u0026#39; . $count . \u0026#39;\u0026amp;incrementNumber=\u0026#39; . $incrementNumber); ?\u0026gt;\u0026#34; hx-swap=\u0026#34;morph:outerHTML\u0026#34; hx-target=\u0026#34;closest .card\u0026#34;\u0026gt; + \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn btn-secondary\u0026#34; type=\u0026#34;button\u0026#34; hx-get=\u0026#34;\u0026lt;?= signedurl()-\u0026gt;siteUrl(\u0026#39;cells/counter/decrement?count=\u0026#39; . $count . \u0026#39;\u0026amp;incrementNumber=\u0026#39; . $incrementNumber); ?\u0026gt;\u0026#34; hx-swap=\u0026#34;morph:outerHTML\u0026#34; hx-target=\u0026#34;closest .card\u0026#34;\u0026gt; - \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... And our initial component calls:\n... \u0026lt;div class=\u0026#34;row justify-content-md-center mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-sm-6 col-lg-3\u0026#34;\u0026gt; \u0026lt;?= view_cell(\u0026#39;Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter\\CounterCell\u0026#39;); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-sm-6 col-lg-3\u0026#34;\u0026gt; \u0026lt;?= view_cell(\u0026#39;Michalsn\\CodeIgniterDemoHtmx\\Cells\\Counter\\CounterCell\u0026#39;, [\u0026#39;count\u0026#39; =\u0026gt; 5, \u0026#39;incrementNumber\u0026#39; =\u0026gt; 5]); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... Now we can be sure that no one will manipulate the URL, and components will work the way we initailized them. Of course, we also need a Filter to validate signed URLs, but you can read in the docs on how to use it.\n","permalink":"https://michalsn.dev/posts/codeigniter-signed-url/","summary":"\u003cp\u003eSigning URLs may be very useful when we want to prevent manual URL manipulation or when the given address should have an expiration date. \u003ca href=\"https://github.com/michalsn/codeigniter-signed-url\"\u003eCodeIgniter Signed URL\u003c/a\u003e package makes it very easy.\u003c/p\u003e","title":"CodeIgniter Signed Url"},{"content":"HTMX is gaining in popularity. No wonder, because in a world overflowing with Javascript-based sites that getting more and more complicated to achieve even tiny result, this solution turns out to be a pleasant return to the past - in quite a good way.\nI think we all remember the old days when we wrote in Prototype or jQuery. Back then the option to return HTML chunks was not completely strange. I remember doing it myself - setting various additional options via the data attribute. You usually ended up with one method that tried to do all sorts of requests and update code snippets on the web page depending on the specified container.\nIt all worked, but was somehow not particularly convenient. Fortunately, someone came up with the idea to make a real library that would handle all (or at least most) of the problems we might encounter. And so HTMX was born.\nBut let\u0026rsquo;s move on to how we can make it easier to work with HTMX in CodeIgniter. The CodeIgniter-HTMX library will help us with this.\nThe first thing we need to do is install it:\ncomposer require michalsn/codeigniter-htmx Now at our disposal are a number of additional methods from the IncomingRequest, Response and RedirectResponse classes. In addition, we can use a new helper view_fragment(), which will allow us to display only fragments of the view. The last thing is to facilitate the display of errors, which will now be displayed in the modal window. By default, HTMX does not display errors.\nDetailed documentation can be found here: https://michalsn.github.io/codeigniter-htmx/installation/\nAs a bonus, I also suggest taking a look at the repository with examples. There you can find several demos that will show you how we can use HTMX when building our application. You will find several examples:\nBooks - an example of data displayed in a table with pagination, search, sorting and inline editing. Tasks - an example of how we can use events to load content in a slightly more sophisticated way. Paraghraphs - an example of sorting content and editing it in a modal window. It\u0026rsquo;s time to give HTMX a try.\n","permalink":"https://michalsn.dev/posts/codeigniter-htmx/","summary":"\u003cp\u003e\u003ca href=\"https://htmx.org\"\u003eHTMX\u003c/a\u003e is gaining in popularity. No wonder, because in a world overflowing with Javascript-based sites that getting more and more complicated to achieve even tiny result, this solution turns out to be a pleasant return to the past - in quite a good way.\u003c/p\u003e","title":"CodeIgniter HTMX"},{"content":"How can we handle generation of a custom domain link in CodeIgniter 4? Although this is not a built-in feature, we can deal with it in a fairly simple way.\nSuppose we have an application where each user account is served from its own domain. We can handle this scenarion quite simply through a simple helper:\n// app/Helpers/app_helper.php /** * Returns a site URL as defined by Host. * * @param string|array $path URI string * @param string|null $host Host to use */ function account_url($path = \u0026#39;\u0026#39;, ?string $host = null): string { // Convert array of segments to a string if (is_array($path)) { $path = implode(\u0026#39;/\u0026#39;, $path); } if (empty($host)) { return site_url($path); } $uri = _get_uri($path); $uri-\u0026gt;setHost($host); return URI::createURIString($uri-\u0026gt;getScheme(), $uri-\u0026gt;getAuthority(), $uri-\u0026gt;getPath(), $uri-\u0026gt;getQuery(), $uri-\u0026gt;getFragment()); } Now we can use our helper function like this:\nhelper(\u0026#39;app\u0026#39;); account_url(\u0026#39;controller/method\u0026#39;, \u0026#39;https://host.tld\u0026#39;); So basically this helper will work the same as site_url, but it will handle an additional parameter that will define our custom domain.\n","permalink":"https://michalsn.dev/posts/generating-a-custom-domain-links-in-codeigniter-4/","summary":"\u003cp\u003eHow can we handle generation of a custom domain link in CodeIgniter 4? Although this is not a built-in feature, we can deal with it in a fairly simple way.\u003c/p\u003e","title":"Generating a custom domain link in CodeIgniter 4"},{"content":"Serverless has been very popular for several years now. When we need very high performance it can be a very good alternative to traditional server solutions. Therefore, this time we will try to run CodeIgniter 4 in a serverless environment.\nInstallation The first thing to do is to install the Serverless framework (if you don\u0026rsquo;t already have it). You can read how to do that here: https://bref.sh/docs/installation.html\nFollow all the steps from the \u0026ldquo;Serverless\u0026rdquo; section and come back here.\nIf we already have the Serverless Framework installed and an AWS account configured, we can move on. Let\u0026rsquo;s create a sample project in CodeIgniter 4:\ncomposer create-project codeigniter4/appstarter serverless-ci4 Inside our project, let\u0026rsquo;s install bref, which will allow us to easily run our PHP project on Lambda function.\ncomposer require bref/bref Let\u0026rsquo;s initiate the project.\nvendor/bin/bref init And select the 0 option when asked about the type of apllication.\nConfiguration First things first. We should adjust the serverless.yaml file to our needs:\nservice: serverless-codeigniter4 provider: name: aws region: eu-central-1 runtime: provided.al2 memorySize: 512 plugins: - ./vendor/bref/bref functions: api: handler: public/index.php # point us to the CodeIgniter\u0026#39;s index.php file description: \u0026#39;\u0026#39; timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds) layers: - ${bref:layer.php-81-fpm} events: - httpApi: \u0026#39;*\u0026#39; # Exclude files from deployment package: patterns: - \u0026#39;!node_modules/**\u0026#39; - \u0026#39;!tests/**\u0026#39; Now we can move on. CodeIgniter 4 requires the Intl extension. By default, this extension is disabled, so we need to enable it. To do this, we need to create a php.ini file that will be loaded when the instance is launched.\nIn the root directory of our project, let\u0026rsquo;s create the following path/file: php/conf.d/php.ini with the contents:\nextension=intl Let\u0026rsquo;s move on to CodeIgniter\u0026rsquo;s configuration settings, because there are a few things we need to change. Let\u0026rsquo;s create a copy of the env file under the name .env. Now let\u0026rsquo;s edit the value for CI_ENVIRONMENT and few others.\nCI_ENVIRONMENT = development app.indexPage = \u0026#39;\u0026#39; app.uriProtocol = \u0026#39;PATH_INFO\u0026#39;; We change the CI_ENVIRONMENT just in case something goes wrong, so we can see the errors. Later we will go back to the production value. The change for the uriProtocol is necessary so the Lambda could recognize our routing.\nNext, we need to overwrite the paths for the session (if we will use it) and cache files. In the following example we assume that we use a file handler for both the session and cache files.\n// app/Config/Registrar.php namespace App\\Config; use RuntimeException; class Registrar { public static function App() { $isLambda = isset($_SERVER[\u0026#39;LAMBDA_TASK_ROOT\u0026#39;]); if ($isLambda) { $sessionPathDir = \u0026#39;/tmp/session\u0026#39;; if (! is_dir($sessionPathDir)) { if (! mkdir($sessionPathDir, 0755, true) \u0026amp;\u0026amp; ! is_dir($sessionPathDir)) { throw new RuntimeException(sprintf(\u0026#39;Directory \u0026#34;%s\u0026#34; cannot be created\u0026#39;, $sessionPathDir)); } } return [ \u0026#39;sessionSavePath\u0026#39; =\u0026gt; $sessionPathDir, ]; } return []; } public static function Cache() { $isLambda = isset($_SERVER[\u0026#39;LAMBDA_TASK_ROOT\u0026#39;]); if ($isLambda) { $cachePathDir = \u0026#39;/tmp/cache\u0026#39;; if (! is_dir($cachePathDir)) { if (! mkdir($cachePathDir, 0755, true) \u0026amp;\u0026amp; ! is_dir($cachePathDir)) { throw new RuntimeException(sprintf(\u0026#39;Directory \u0026#34;%s\u0026#34; cannot be created\u0026#39;, $cachePathDir)); } } return [ \u0026#39;file\u0026#39; =\u0026gt; [ \u0026#39;storePath\u0026#39; =\u0026gt; $cachePathDir ], ]; } return []; } } The last point will be to change the logging method so that the logs are available in CloudWatch. To do this, we will install a simple extension that will replace our default logger.\ncomposer require bref/logger Let\u0026rsquo;s edit the Services.php file to start using the new logger.\n// app/Config/Services.php namespace Config; use CodeIgniter\\Config\\BaseService; use Bref\\Logger\\StderrLogger; class Services extends BaseService { /** * The Logger class is a PSR-3 compatible Logging class that supports * multiple handlers that process the actual logging. * * @return StderrLogger */ public static function logger(bool $getShared = true) { if ($getShared) { return static::getSharedInstance(\u0026#39;logger\u0026#39;); } return new StderrLogger(); } } We can now upload our project. The first time deploy may take about 2 minutes.\nserverless deploy After navigating to the address that will be displayed to us in the console, we should see the standard landing page of CodeIgniter 4.\nThe last thing we should do is to update the CI_ENVIRONMENT and baseURL variables in the .env file:\nCI_ENVIRONMENT = production app.baseURL = \u0026#39;https://out-instance-number.execute-api.eu-central-1.amazonaws.com\u0026#39; The value for baseURL should be the value displayed to us after deployment in the console.\nNow we should call serverless deploy one more time and we are all set.\nOf course, usually we won\u0026rsquo;t be serving entire websites, but rather providing an API. But if we come to run a full-fledged website, we should remember not to serve the static files through the Lambda function.\nFortunately, there are built-in solutions for this. I encourage you to study the documentation: https://bref.sh/docs/.\nThat would be it. We have a CodeIgniter 4 application served through the Lambda function - in other words: Serverless CodeIgniter 4.\n","permalink":"https://michalsn.dev/posts/serverless-codeigniter-4/","summary":"\u003cp\u003eServerless has been very popular for several years now. When we need very high performance it can be a very good alternative to traditional server solutions. Therefore, this time we will try to run CodeIgniter 4 in a serverless environment.\u003c/p\u003e","title":"Serverless Codeigniter 4"},{"content":"When we give users option to connect their own domain to our service, we must also check that the DNS record has the correct CNAME settings before we approve such a domain.\nWe can use a simple helper that will do the verification:\n/** * Verify CNAME for domain * * @param string $host * * @return bool */ function verifyCname(string $host): bool { $result = false; $records = dns_get_record($host, DNS_CNAME); foreach ($records as $row) { if ($row[\u0026#39;type\u0026#39;] === \u0026#39;CNAME\u0026#39;) { if ($row[\u0026#39;host\u0026#39;] === $host \u0026amp;\u0026amp; $row[\u0026#39;target\u0026#39;] === \u0026#39;add your valid cname record value here\u0026#39;) { $result = true; } else { return false; } } } return $result; } It would be good to verify beforehand that the hostname given by the user is correct, or at least has a chance to be correct. For this purpose, we can use the list of available domains:\nhttps://github.com/incognico/list-of-top-level-domains With the right choice of verification, we will be able to weed out domains that are clearly not valid or simply cannot exist.\n","permalink":"https://michalsn.dev/posts/verify-cname-for-domain/","summary":"\u003cp\u003eWhen we give users option to connect their own domain to our service, we must also check that the DNS record has the correct \u003ccode\u003eCNAME\u003c/code\u003e settings before we approve such a domain.\u003c/p\u003e","title":"Verification of CNAME record for custom domain"},{"content":"What if we want every user in our application to have his data served through his own subdomain? I will show you how to do it in CodeIgniter 4 framework.\nThe assumptions are as follows - we have 2 domains:\nprimary domain on which users will be managed and subdomains, on which the application for each user will run In short, this is one of the concepts that are often used by SaaS applications.\nThis can be achieved quite easily. However, when working with CodeIgniter 4 you have to remember that variables defined in .env file have priority over all other changes you try to make while the framework is running.\nWith this in mind - the first thing we will do is to drop the app.baseURL variable from the .env file so that we can dynamically change this value. This variable is not active by default but you may be used to use it.\nFirst things first - we have to edit the app/Config/App.php file and add two variables:\n/** * -------------------------------------------------------------------------- * Subdomain URL * -------------------------------------------------------------------------- * * Subdomain address for accounts in the system. * * @var string */ public $subdomainURL = \u0026#39;\u0026#39;; /** * -------------------------------------------------------------------------- * Account ID * -------------------------------------------------------------------------- * * Account ID (or empty string for main domain name). * Value \u0026#39;404\u0026#39; means that domain/subdomain is not registered in the system. * * @var string */ public $accountID = \u0026#39;\u0026#39;; We will now override the subdomainURL variable in the .env file and add our own variable for baseURL:\nbaseURL = \u0026#39;application.test\u0026#39; // yes, this is correct - we don\u0026#39;t want to use app.baseURL app.subdomainURL = \u0026#39;.application.test\u0026#39; If we use separate variables for the primary domain and subdomain address, our system will become more flexible as it will be able to use different domains for subdomains.\nThe next thing will be to create some form of subdomain creation for each user. I will not go into that here, but I will mention just one thing. It is important to validate subdomain names properly, so that they generate valid URLs.\nIf you keep the subdomain names in the database, then after each change you will have to update the cache in which you will keep informations about subdomains. Let\u0026rsquo;s make an example model method:\npublic function updateSubdomainCache() { $results = $this-\u0026gt;builder()-\u0026gt;select(\u0026#39;account_id, subdomain\u0026#39;)-\u0026gt;get()-\u0026gt;getResult(); $subdomain = config(\u0026#39;App\u0026#39;)-\u0026gt;subdomainURL); $data = []; foreach ($results as $row) { $data[$row-\u0026gt;subdomain . $subdomain] = $row-\u0026gt;account_id; } cache()-\u0026gt;save(\u0026#39;subdomains\u0026#39;, $data, 0); } Now that we have almost everything we need, we can move on to overriding baseURL address and make it work for subdomains. We are going to use Config/Registrar class which you can read more about here:\nnamespace App\\Config; class Registrar { public static function App() { if (! is_cli()) { if (! $subdomains = cache(\u0026#39;subdomains\u0026#39;)) { $subdomains = []; } $subdomains[env(\u0026#39;baseURL\u0026#39;)] = \u0026#39;\u0026#39;; if (isset($subdomains[$_SERVER[\u0026#39;SERVER_NAME\u0026#39;]])) { return [ \u0026#39;baseURL\u0026#39; =\u0026gt; sprintf(\u0026#39;https://%s/\u0026#39;, $_SERVER[\u0026#39;SERVER_NAME\u0026#39;]), \u0026#39;accountID\u0026#39; =\u0026gt; $subdomains[$_SERVER[\u0026#39;SERVER_NAME\u0026#39;]] ]; } } return [ \u0026#39;baseURL\u0026#39; =\u0026gt; sprintf(\u0026#39;https://%s/\u0026#39;, env(\u0026#39;baseURL\u0026#39;)), \u0026#39;accountID\u0026#39; =\u0026gt; \u0026#39;404\u0026#39; ]; } } Finally, we need to define routing. The primary domain and subdomains will be distinguished using the hostname resolution trick:\n// subdomains routes $routes-\u0026gt;group(\u0026#39;\u0026#39;, [], function ($routes) { }); // main domain routes $routes-\u0026gt;group(\u0026#39;\u0026#39;, [\u0026#39;hostname\u0026#39; =\u0026gt; env(\u0026#39;baseURL\u0026#39;)], function ($routes) { }); This way we set the correct application address and additionally the account ID, which will allow us to form correct queries to the database right away.\n","permalink":"https://michalsn.dev/posts/setting-dynamic-subdomains-for-every-user-account/","summary":"\u003cp\u003eWhat if we want every user in our application to have his data served through his own subdomain? I will show you how to do it in CodeIgniter 4 framework.\u003c/p\u003e","title":"Setting dynamic subdomains for every user account"},{"content":"I recently had to use a query with INSERT ON DUPLICATE KEY UPDATE, but CodeIgniter 4 does not have built-in support for this type of query because it is not available in all database drivers.\nSince version 4.3.0 there is a upsert() method that adds support for the described function to the core of the framework. You can read more about it in the user guide.\nTo start with a basic question - why not use a query with REPLACE? There are several reasons:\nIf we are dealing with a table that has a field with AUTO INCREMENT, it is then incremented every time. If we have some foreign key relations with ON DELETE CASCADE option, then this it gonna be a mess, because we will automatically delete data from other tables The last reason is the slowness of queries with REPLACE. Each time we try to perform INSERT, if the data is already there, we perform DELETE operation and then another INSERT. The INSERT ON DUPLICATE KEY UPDATE query comes to the rescue. It is a remedy for all the above problems.\nOkay, let\u0026rsquo;s see how we can add support for this type of query to CodeIgniter 4. We will create a Trait class:\n// app/Traits/ExtraModelMethods.php namespace App\\Traits; use CodeIgniter\\Database\\Exceptions\\DataException; use InvalidArgumentException; use ReflectionException; use stdClass; trait ExtraModelMethods { /** * Insert on duplicate key update * * @param array|object $data Data * @param bool $escape Escape * @throws ReflectionException */ public function insertOnDuplicateUpdate($data, ?bool $escape = null): bool { if (! empty($data)) { $data = $this-\u0026gt;transformAllDataToArray($data, \u0026#39;update\u0026#39;); } // Validate data before saving. if (! $this-\u0026gt;skipValidation \u0026amp;\u0026amp; ! $this-\u0026gt;cleanRules(true)-\u0026gt;validate($data)) { return false; } // Must be called first so we don\u0026#39;t // strip out updated_at values. $data = $this-\u0026gt;doProtectFields($data); // doProtectFields() can further remove elements from // $data so we need to check for empty dataset again if (empty($data)) { throw DataException::forEmptyDataset(\u0026#39;update\u0026#39;); } // Set created_at and updated_at with same time $date = $this-\u0026gt;setDate(); if ($this-\u0026gt;useTimestamps \u0026amp;\u0026amp; $this-\u0026gt;createdField \u0026amp;\u0026amp; ! array_key_exists($this-\u0026gt;createdField, $data)) { $data[$this-\u0026gt;createdField] = $date; } if ($this-\u0026gt;useTimestamps \u0026amp;\u0026amp; $this-\u0026gt;updatedField) { $data[$this-\u0026gt;updatedField] = $date; } $builder = $this-\u0026gt;builder(); $insert = $builder-\u0026gt;set($data, \u0026#39;\u0026#39;, $escape)-\u0026gt;getCompiledInsert(); // Remove created_at field in case of update query if ($data[$this-\u0026gt;createdField]) { unset($data[$this-\u0026gt;createdField]); } $update = $builder-\u0026gt;set($data, \u0026#39;\u0026#39;, $escape)-\u0026gt;getCompiledUpdate(); $update = preg_replace(\u0026#39;/UPDATE[\\s\\S]+? SET /\u0026#39;, \u0026#39;\u0026#39;, $update); // Prepare event $eventData = [ \u0026#39;id\u0026#39; =\u0026gt; $this-\u0026gt;getIdValue($data), \u0026#39;data\u0026#39; =\u0026gt; $data, \u0026#39;result\u0026#39; =\u0026gt; $builder-\u0026gt;db()-\u0026gt;query(sprintf(\u0026#39;%s ON DUPLICATE KEY UPDATE %s\u0026#39;, $insert, $update)), ]; if ($this-\u0026gt;tempAllowCallbacks) { $this-\u0026gt;trigger(\u0026#39;afterUpdate\u0026#39;, $eventData); } $this-\u0026gt;tempAllowCallbacks = $this-\u0026gt;allowCallbacks; return $eventData[\u0026#39;result\u0026#39;]; } /** * Transform data to array * * @param array|object|null $data Data * @param string $type Type of data (insert|update) * * @throws DataException * @throws InvalidArgumentException * @throws ReflectionException */ protected function transformAllDataToArray($data, string $type): array { if (! in_array($type, [\u0026#39;insert\u0026#39;, \u0026#39;update\u0026#39;], true)) { throw new InvalidArgumentException(sprintf(\u0026#39;Invalid type \u0026#34;%s\u0026#34; used upon transforming data to array.\u0026#39;, $type)); } if (empty($data)) { throw DataException::forEmptyDataset($type); } // If $data is using a custom class with public or protected // properties representing the collection elements, we need to grab // them as an array. if (is_object($data) \u0026amp;\u0026amp; ! $data instanceof stdClass) { $data = $this-\u0026gt;objectToArray($data, false, true); } // If it\u0026#39;s still a stdClass, go ahead and convert to // an array so doProtectFields and other model methods // don\u0026#39;t have to do special checks. if (is_object($data)) { $data = (array) $data; } // If it\u0026#39;s still empty here, means $data is no change or is empty object if (empty($data)) { throw DataException::forEmptyDataset($type); } return $data; } } To use the new method in our model we just need to import our Trait class:\n// app/Models/ProfileModel.php namespace App\\Models; use App\\Traits\\ExtraModelMethods; use CodeIgniter\\Model; class ProfileModel extends Model { use ExtraModelMethods; protected $table = \u0026#39;profile_table\u0026#39;; ... } Let\u0026rsquo;s create an example migration file to test this. In console we type:\nphp spark make:migration AddProfileTable And then inside our migration file we will create table with the unique identifier.\n// app/Database/Migrations/2021-10-15-101102_AddProfileTable.php namespace App\\Database\\Migrations; use CodeIgniter\\Database\\Migration; class AddProfileTable extends Migration { public function up() { $this-\u0026gt;forge-\u0026gt;addField([ \u0026#39;id\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;INT\u0026#39;, \u0026#39;constraint\u0026#39; =\u0026gt; \u0026#39;11\u0026#39;, \u0026#39;unsigned\u0026#39; =\u0026gt; true, \u0026#39;null\u0026#39; =\u0026gt; false, \u0026#39;auto_increment\u0026#39; =\u0026gt; true, ], \u0026#39;user_id\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;INT\u0026#39;, \u0026#39;constraint\u0026#39; =\u0026gt; \u0026#39;11\u0026#39;, \u0026#39;unsigned\u0026#39; =\u0026gt; true, \u0026#39;null\u0026#39; =\u0026gt; false, ], \u0026#39;name\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;VARCHAR\u0026#39;, \u0026#39;constraint\u0026#39; =\u0026gt; \u0026#39;128\u0026#39;, \u0026#39;null\u0026#39; =\u0026gt; true, ], \u0026#39;created_at\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;DATETIME\u0026#39;, \u0026#39;null\u0026#39; =\u0026gt; false, ], \u0026#39;updated_at\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;DATETIME\u0026#39;, \u0026#39;null\u0026#39; =\u0026gt; false, ], ]); $this-\u0026gt;forge-\u0026gt;addKey(\u0026#39;id\u0026#39;, true); $this-\u0026gt;forge-\u0026gt;addUniqueKey(\u0026#39;user_id\u0026#39;); $this-\u0026gt;forge-\u0026gt;createTable(\u0026#39;profile_table\u0026#39;); } public function down() { $this-\u0026gt;forge-\u0026gt;dropTable(\u0026#39;profile_table\u0026#39;); } } Now, we can test it out in our controller. Let\u0026rsquo;s edit Home controller by adding new methods:\n// app/Controllers/Home.php namespace App\\Controllers; use App\\Models\\ProfileModel; class Home extends BaseController { public function index() { return view(\u0026#39;welcome_message\u0026#39;); } public function add() { $profileModel = model(ProfileModel::class); $profileModel-\u0026gt;insertOnDuplicateUpdate([ \u0026#39;user_id\u0026#39; =\u0026gt; 1, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;James\u0026#39;, ]); } public function edit() { $profileModel = model(ProfileModel::class); $profileModel-\u0026gt;insertOnDuplicateUpdate([ \u0026#39;user_id\u0026#39; =\u0026gt; 1, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Frank\u0026#39;, ]); } } After calling the add() method, we should have one entry in the table with the name \u0026ldquo;James\u0026rdquo;. After calling the edit() method, we should still have one entry in the table, but this time with the name \u0026ldquo;Frank\u0026rdquo;.\nBecause the user_id column is unique, new data is added only if the value for this column is unique. Otherwise, the data is updated.\n","permalink":"https://michalsn.dev/posts/insert-on-duplicate-key-update-with-codeigniter-4/","summary":"\u003cp\u003eI recently had to use a query with \u003cstrong\u003eINSERT ON DUPLICATE KEY UPDATE\u003c/strong\u003e, but CodeIgniter 4 does not have built-in support for this type of query because it is not available in all database drivers.\u003c/p\u003e","title":"INSERT ON DUPLICATE KEY UPDATE with CodeIgniter 4"},{"content":"Last time I showed you how to easily integrate Mix with CodeIgniter 4. This time we\u0026rsquo;ll complete the integration process by implementing a helper which will make using versioned assets very convenient and easy.\nWhy do we even need this helper? Mix can generate versioned versions of files. In short, it does this by adding a special string to the file name, as a query string. This string is the checksum for the file. If it changes, it tells the browser that it needs to download the resource again, not use the cache.\nWe need to create a file mix_helper.php in app/helpers/ directory:\nif (! function_exists(\u0026#39;mix\u0026#39;)) { /** * Get the path to a versioned Mix file. * * @param string $path * @param string $manifestDirectory * * @return string * * @throws Exception */ function mix(string $path, string $manifestDirectory = \u0026#39;\u0026#39;): string { static $manifests = []; $publicPath = ROOTPATH . \u0026#39;public\u0026#39;; if ($path[0] !== \u0026#39;/\u0026#39;) { $path = \u0026#34;/{$path}\u0026#34;; } if ($manifestDirectory \u0026amp;\u0026amp; $manifestDirectory[0] !== \u0026#39;/\u0026#39;) { $manifestDirectory = \u0026#34;/{$manifestDirectory}\u0026#34;; } if (is_file($publicPath . $manifestDirectory . \u0026#39;/hot\u0026#39;)) { $url = rtrim(file_get_contents($publicPath . $manifestDirectory . \u0026#39;/hot\u0026#39;)); $customUrl = config(\u0026#39;Mix\u0026#39;)-\u0026gt;hotProxyUrl; if (! empty($customUrl)) { return $customUrl . $path; } if (strpos($url , \u0026#39;http://\u0026#39;) === 0 || strpos($url , \u0026#39;https://\u0026#39;) === 0) { return explode(\u0026#39;:\u0026#39;, $url, 2)[1] . $path; } return \u0026#34;//localhost:8080{$path}\u0026#34;; } $manifestPath = $publicPath . $manifestDirectory . \u0026#39;/mix-manifest.json\u0026#39;; if (! isset($manifests[$manifestPath])) { if (! is_file($manifestPath)) { throw new Exception(\u0026#39;The Mix manifest does not exist.\u0026#39;); } $manifests[$manifestPath] = json_decode(file_get_contents($manifestPath), true); } $manifest = $manifests[$manifestPath]; if (! isset($manifest[$path])) { $exception = new Exception(\u0026#34;Unable to locate Mix file: {$path}.\u0026#34;); if (! CI_DEBUG) { return $path; } else { throw $exception; } } return config(\u0026#39;Mix\u0026#39;)-\u0026gt;url . $manifestDirectory . $manifest[$path]; } } Next, we create the Mix.php configuration file in the app/config/ directory:\nnamespace Config; use CodeIgniter\\Config\\BaseConfig; class Mix extends BaseConfig { /** * Url for CDN. * Leave empty if using local files. * * @var string */ public $url = \u0026#39;\u0026#39;; /** * Hot reload Url. * Leave empty for default localhost:8080. * * @var string */ public $hotProxyUrl = \u0026#39;\u0026#39;; } There is a good chance that you won\u0026rsquo;t need to change anything in the configuration file, because you will only be using local resources, but you can change a few settings if you need to.\nHow to use this helper? It\u0026rsquo;s very simple - just enter an ordinary file name and helper will add appropriate query string, based on mix-manifest.json file generated during asset compilation.\nThis is what our asset configuration file will look like (webpack.mix.js):\nlet mix = require(\u0026#39;laravel-mix\u0026#39;); mix.js(\u0026#39;resources/js/app.js\u0026#39;, \u0026#39;js\u0026#39;) .postCss(\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;css\u0026#39;) .version() .setPublicPath(\u0026#39;public\u0026#39;); And in our view we will apply a helper:\n\u0026lt;link href=\u0026#34;\u0026lt;?= mix(\u0026#39;/css/app.css\u0026#39;); ?\u0026gt;\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; This will get a link similar to this one:\n\u0026lt;link href=\u0026#34;/css/app.css?id=a8b3deb4b7d26dcf51d2\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; The same for JS files. Without the helper we would have to manually rename the versioned files every time.\n","permalink":"https://michalsn.dev/posts/codeigniter-4-mix-versioning/","summary":"\u003cp\u003eLast time I showed you how to easily integrate Mix with CodeIgniter 4. This time we\u0026rsquo;ll complete the integration process by implementing a helper which will make using versioned assets very convenient and easy.\u003c/p\u003e","title":"CodeIgniter 4 + Mix with versioning"},{"content":"Today we are going to look at configuring CodeIgniter 4 in conjunction with Mix. Mix is one of the components that comes with the Laravel framework.\nThe first thing we do is install CodeIgniter 4 using the command:\ncomposer create-project codeigniter4/appstarter codeigniter-mix --no-dev Next, we need to add Mix, which is basically an overlay of webpack. Basically, it would be enough to initialize Mix this way:\nnpm init -y npm install laravel-mix --save-dev But instead, I will provide the contents of the entire package.json file:\n{ \u0026#34;private\u0026#34;: true, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;npm run development\u0026#34;, \u0026#34;development\u0026#34;: \u0026#34;mix\u0026#34;, \u0026#34;watch\u0026#34;: \u0026#34;mix watch\u0026#34;, \u0026#34;watch-poll\u0026#34;: \u0026#34;mix watch -- --watch-options-poll=1000\u0026#34;, \u0026#34;hot\u0026#34;: \u0026#34;mix watch --hot\u0026#34;, \u0026#34;prod\u0026#34;: \u0026#34;npm run production\u0026#34;, \u0026#34;production\u0026#34;: \u0026#34;mix --production\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;axios\u0026#34;: \u0026#34;^0.21\u0026#34;, \u0026#34;laravel-mix\u0026#34;: \u0026#34;^6.0.6\u0026#34;, \u0026#34;lodash\u0026#34;: \u0026#34;^4.17.19\u0026#34;, \u0026#34;postcss\u0026#34;: \u0026#34;^8.1.14\u0026#34; } } This file must be initialized via the command:\nnpm install All the necessary components will be installed. All that remains is to create the webpack.mix.js file, which will allow us to define the various steps when compiling the JS and CSS files.\nlet mix = require(\u0026#39;laravel-mix\u0026#39;); mix.js(\u0026#39;resources/js/app.js\u0026#39;, \u0026#39;js\u0026#39;) .postCss(\u0026#39;resources/css/app.css\u0026#39;, \u0026#39;css\u0026#39;, [ // ]) .setPublicPath(\u0026#39;public\u0026#39;); Now we need to take care of the proper folder structure. In the main directory, where CodeIgniter is located, we create resources directory. Our JS and CSS files will be located there - in js and css directories respectively.\nIn the js directory, we create the bootstrap.js file with the following content:\nwindow._ = require(\u0026#39;lodash\u0026#39;); window.axios = require(\u0026#39;axios\u0026#39;); window.axios.defaults.headers.common[\u0026#39;X-Requested-With\u0026#39;] = \u0026#39;XMLHttpRequest\u0026#39;; And then the app.js file, with the contents:\nrequire(\u0026#39;./bootstrap\u0026#39;); The whole thing should look more or less like this:\n/public /js - app.js /css - app.css /resources /js - app.js - bootstrap.js /css - app.css Now we can compile everything using the command:\nnpx mix or for the production version:\nnpx mix -p ","permalink":"https://michalsn.dev/posts/codeigniter-4-mix/","summary":"\u003cp\u003eToday we are going to look at configuring CodeIgniter 4 in conjunction with \u003ca href=\"https://laravel.com/docs/8.x/mix\"\u003eMix\u003c/a\u003e. Mix is one of the components that comes with the Laravel framework.\u003c/p\u003e","title":"CodeIgniter 4 + Mix"},{"content":"Integration with Auth0 is quite simple and comes down to a few steps. I assume you already have your Auth0 account so you just need to install the library via Composer:\ncomposer require auth0/auth0-php \u0026#34;^7.9\u0026#34; To get started, we need to create a configuration file app/Config/Auth0.php. It is a good idea to leave the configuration values in the file empty and add them via the .env file. This will ensure that your sensitive data doesn\u0026rsquo;t end up in the repository.\nnamespace Config; use CodeIgniter\\Config\\BaseConfig; class Auth0 extends BaseConfig { public $domain = \u0026#39;your domain\u0026#39;; public $clientId = \u0026#39;your client id\u0026#39;; public $clientSecret = \u0026#39;your client secret\u0026#39;; public $redirectUri = \u0026#39;redirect url\u0026#39;; public $scope = \u0026#39;scope\u0026#39;; } Next, we\u0026rsquo;ll create the main class that will allow Auth0 to write data to the session. To do this, we will implement the interface provided by Auth0. We need to create a file: app/Libraries/Auth0SessionStorage:\nnamespace App\\Libraries; use Auth0\\SDK\\Store\\StoreInterface; class Auth0SessionStore implements StoreInterface { /** * Session object * * @var \\CodeIgniter\\Session\\Session; */ protected $session; /** * Session variable prefix * * @var string */ protected $prefix = \u0026#39;auth0_\u0026#39;; /** * CodeIgniterSessionStore constructor. */ public function __construct() { $this-\u0026gt;session = service(\u0026#39;session\u0026#39;); } /** * Persists $value on $_SESSION, identified by $key. * * @param string $key Session key to set. * @param mixed $value Value to use. * * @return void */ public function set(string $key, $value): void { $this-\u0026gt;session-\u0026gt;set($this-\u0026gt;prefix . $key, $value); } /** * Gets persisted values identified by $key. * If the value is not set, returns $default. * * @param string $key Session key to set. * @param mixed $default Default to return if nothing was found. * * @return mixed */ public function get(string $key, $default = null) { return $this-\u0026gt;session-\u0026gt;get($this-\u0026gt;prefix . $key) ?? $default; } /** * Removes a persisted value identified by $key. * * @param string $key Session key to delete. * * @return void */ public function delete(string $key): void { $this-\u0026gt;session-\u0026gt;remove($this-\u0026gt;prefix . $key); } } The last step is to create a service to handle everything conveniently. Let\u0026rsquo;s edit app/Config/Services.php file:\nnamespace Config; use Auth0\\SDK\\Auth0; use Auth0\\SDK\\Exception\\CoreException; use App\\Libraries\\Auth0SessionStore; use Config\\Services as BaseService; class Services extends BaseService { /** * The Auth0 service. * * @param boolean $getShared * * @return Auth0 * @throws CoreException */ public static function auth0(bool $getShared = true) { if ($getShared) { return static::getSharedInstance(\u0026#39;auth0\u0026#39;); } $config = config(\u0026#39;Auth0\u0026#39;); $config = [ \u0026#39;domain\u0026#39; =\u0026gt; $config-\u0026gt;domain, \u0026#39;client_id\u0026#39; =\u0026gt; $config-\u0026gt;clientId, \u0026#39;client_secret\u0026#39; =\u0026gt; $config-\u0026gt;clientSecret, \u0026#39;redirect_uri\u0026#39; =\u0026gt; $config-\u0026gt;redirectUri, \u0026#39;scope\u0026#39; =\u0026gt; $config-\u0026gt;scope, \u0026#39;store\u0026#39; =\u0026gt; new Auth0SessionStore(), ]; return new Auth0($config); } } All that\u0026rsquo;s left is to test the whole thing and create a controller app/Controllers/Auth.php.\nnamespace App\\Controllers; class Auth extends BaseController { public function callback() { return view(\u0026#39;auth\u0026#39;, [\u0026#39;user\u0026#39; =\u0026gt; service(\u0026#39;auth0\u0026#39;)-\u0026gt;getUser()]); } public function login() { service(\u0026#39;auth0\u0026#39;)-\u0026gt;login(); } public function logout() { $config = config(\u0026#39;auth0\u0026#39;); service(\u0026#39;auth0\u0026#39;)-\u0026gt;logout(); $logoutUrl = sprintf(\u0026#39;https://%s/v2/logout?client_id=%s\u0026amp;returnTo=%s\u0026#39;, $config-\u0026gt;domain, $config-\u0026gt;clientId, site_url()); $this-\u0026gt;response-\u0026gt;setHeader(\u0026#39;Location\u0026#39;, $logoutUrl); } } And then there\u0026rsquo;s the app/Views/auth.php view:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Auth0 Sample\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php if ($user): ?\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;?= $user[\u0026#39;name\u0026#39;]; ?\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;?= site_url(\u0026#39;auth/logout\u0026#39;); ?\u0026gt;\u0026#34;\u0026gt;Logout\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php else: ?\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;\u0026lt;?= site_url(\u0026#39;auth/login\u0026#39;); ?\u0026gt;\u0026#34;\u0026gt;Login\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://michalsn.dev/posts/integrating-codeigniter-4-with-auth0/","summary":"\u003cp\u003eIntegration with \u003ca href=\"https://auth0.com/\"\u003eAuth0\u003c/a\u003e is quite simple and comes down to a few steps. I assume you already have your Auth0 account so you just need to install the library via \u003ca href=\"https://getcomposer.org/\"\u003eComposer\u003c/a\u003e:\u003c/p\u003e","title":"Integrating CodeIgniter 4 with Auth0"},{"content":"Uploading files directly to S3 requires a few changes to the way Dropzone handles uploads, but it\u0026rsquo;s nothing particularly difficult.\nWhat we will need?\nDropzone.js SparkMD5 CodeIgniter 4 AWS SDK for PHP Let\u0026rsquo;s start by initializing Dropzone - the key method here is transformFile, which will make us get a presigned URL.\nconst baseUrl = \u0026#39;\u0026lt;?= base_url(); ?\u0026gt;\u0026#39;; myDropzone = new Dropzone(\u0026#39;#myDropzone\u0026#39;, { acceptedFiles: \u0026#34;image/jpeg,image/jpg\u0026#34;, clickable: \u0026#34;.select-photos-btn\u0026#34;, maxFilesize: 100, url: \u0026#39;#\u0026#39;, method: \u0026#39;post\u0026#39;, timeout: 0, thumbnailMethod: \u0026#39;crop\u0026#39;, resizeQuality: 0.9, transformFile: async function (file, done) { file.md5 = await calculateMD5(file); let initData = await initUpload(file.name, file.type, file.md5); file.presign = initData.presign; file.fileName = initData.name; done(file); } }); Let\u0026rsquo;s take a look at the calculateMD5 function. We need it to be sure that the uploaded file was uploaded correctly - it\u0026rsquo;s our checksum.\nfunction calculateMD5(blob) { return new Promise(function (resolve, reject) { let reader = new FileReader(); reader.readAsBinaryString(blob); reader.onloadend = function () { let hash = btoa(SparkMD5.hashBinary(reader.result, true)); resolve(hash); }; }); } Once we have calculated the checksum, we can initiate the file upload:\nfunction initUpload(name, contentType, md5) { return new Promise(function (resolve, reject) { $.ajax({ url: baseUrl + \u0026#39;home/init_upload\u0026#39;, data: {\u0026#39;file\u0026#39;: name, \u0026#39;content_type\u0026#39;: contentType, \u0026#39;md5\u0026#39;: md5}, headers: {\u0026#39;X-Requested-With\u0026#39;: \u0026#39;XMLHttpRequest\u0026#39;}, type: \u0026#39;POST\u0026#39; }) .done(function (respond) { if (respond.status) { resolve(respond.data); } else { reject() } }) .fail(function () { reject() }); }); } It\u0026rsquo;s time for the server part. For this, we need to install CodeIgniter 4 and the AWS library:\ncomposer create-project codeigniter4/appstarter codeigniter-dropzonejs --no-dev composer require aws/aws-sdk-php In the Home controller, we need to create a init_upload method. This method will be quite large. We could avoid it, for example, by creating a special Service to handle tasks related to S3, but because the example is to be as basic as possible, we will put everything in one place:\nuse App\\Controllers\\BaseController; use Aws\\S3\\PostObjectV4; use Aws\\S3\\S3Client; use CodeIgniter\\Exceptions\\PageNotFoundException; class Home extends BaseController { ... public function init_upload() { if (! $this-\u0026gt;request-\u0026gt;isAjax()) { throw new PageNotFoundException(); } if ($this-\u0026gt;request-\u0026gt;getMethod() !== \u0026#39;post\u0026#39;) { throw new PageNotFoundException(); } if (! $file = $this-\u0026gt;request-\u0026gt;getPost(\u0026#39;file\u0026#39;)) { throw new PageNotFoundException(); } if (! $contentType = $this-\u0026gt;request-\u0026gt;getPost(\u0026#39;content_type\u0026#39;)) { throw new PageNotFoundException(); } if (! $md5 = $this-\u0026gt;request-\u0026gt;getPost(\u0026#39;md5\u0026#39;)) { throw new PageNotFoundException(); } if (! in_array($contentType, [\u0026#39;image/jpeg\u0026#39;, \u0026#39;image/jpg\u0026#39;])) { throw new PageNotFoundException(); } $file = service(\u0026#39;security\u0026#39;)-\u0026gt;sanitizeFilename($file); $client = new S3Client([ \u0026#39;version\u0026#39; =\u0026gt; \u0026#39;latest\u0026#39;, \u0026#39;region\u0026#39; =\u0026gt; \u0026#39;type your S3 region here\u0026#39;, \u0026#39;signature\u0026#39; =\u0026gt; \u0026#39;v4\u0026#39;, \u0026#39;credentials\u0026#39; =\u0026gt; [ \u0026#39;key\u0026#39; =\u0026gt; \u0026#39;type your aws key here\u0026#39;, \u0026#39;secret\u0026#39; =\u0026gt; \u0026#39;type your aws secret here\u0026#39;, ], ]); $bucket = \u0026#39;type your bucket name here\u0026#39;; $formInputs = [ \u0026#39;acl\u0026#39; =\u0026gt; \u0026#39;private\u0026#39;, \u0026#39;key\u0026#39; =\u0026gt; $file, \u0026#39;success_action_status\u0026#39; =\u0026gt; \u0026#39;201\u0026#39;, \u0026#39;content-md5\u0026#39; =\u0026gt; $md5, \u0026#39;content-type\u0026#39; =\u0026gt; $contentType, ]; $options = [ [\u0026#39;acl\u0026#39; =\u0026gt; \u0026#39;private\u0026#39;], [\u0026#39;bucket\u0026#39; =\u0026gt; $bucket], [\u0026#39;success_action_status\u0026#39; =\u0026gt; \u0026#39;201\u0026#39;], [\u0026#39;content-md5\u0026#39; =\u0026gt; $md5], [\u0026#39;content-type\u0026#39; =\u0026gt; $contentType], [\u0026#39;content-length-range\u0026#39;, 0, 1024 * 1024 * 100], [\u0026#39;starts-with\u0026#39;, \u0026#39;$key\u0026#39;, $file], ]; $postObject = new PostObjectV4( $client, $bucket, $formInputs, $options, \u0026#39;+15 minutes\u0026#39; ); $formAttributes = $postObject-\u0026gt;getFormAttributes(); $formInputs = $postObject-\u0026gt;getFormInputs(); return $this-\u0026gt;response-\u0026gt;setJSON([ \u0026#39;status\u0026#39; =\u0026gt; 1, \u0026#39;data\u0026#39; =\u0026gt; [ \u0026#39;name\u0026#39; =\u0026gt; $file, \u0026#39;presign\u0026#39; =\u0026gt; [ \u0026#39;attributes\u0026#39; =\u0026gt; $attributes, \u0026#39;inputs\u0026#39; =\u0026gt; $inputs ] ] ]); } } Once we have the presigned URL generated, we need to force Dropzone to use it when uploading the file. We also need to include additional fields and attributes that will describe the exact file we are uploading. We do it this way:\nmyDropzone.on(\u0026#34;sending\u0026#34;, function (file, xhr, formData) { xhr.open(this.options.method, file.presign.attributes.action, true); Object.keys(file.presign.inputs).forEach(function (key) { formData.append(key, file.presign.inputs[key]); }); let _send = xhr.send xhr.send = function () { _send.call(xhr, formData) } }); All that remains now is to handle the success or failure of the upload. In the case of success, we need to change the final name of the file, which may have changed if the name contained forbidden characters:\nmyDropzone.on(\u0026#34;success\u0026#34;, function (file) { let elem = $(file.previewElement); elem.find(\u0026#39;div[data-dz-name]\u0026#39;).text(file.fileName); }); If an error is returned, we should also display an appropriate message. For this purpose, we need to parse the XML response:\nmyDropzone.on(\u0026#34;error\u0026#34;, function (file, message) { if (file \u0026amp;\u0026amp; message) { if (message.startsWith(\u0026#39;\u0026lt;?xml version\u0026#39;)) { const search = /\u0026lt;Message\u0026gt;(.*?)\u0026lt;\\/Message\u0026gt;/g.exec(message); message = search[1]; this.emit(\u0026#34;error\u0026#34;, file, message); } } }); This way we can prepare a special upload link and upload the file to S3 using Dropzone.js. Then, S3 will verify the integrity of the file and check that it has the correct parameters that were specified when the special signed URL was generated.\n","permalink":"https://michalsn.dev/posts/upload-files-directly-to-s3-with-dropzonejs-and-codeigniter-4/","summary":"\u003cp\u003eUploading files directly to S3 requires a few changes to the way Dropzone handles uploads, but it\u0026rsquo;s nothing particularly difficult.\u003c/p\u003e","title":"Upload files directly to S3 with Dropzone.js"},{"content":"Up until now, working with UUIDs and CodeIgniter 4 hasn\u0026rsquo;t been much fun, but that has now changed with the codeigniter4-uuid library.\nAdmittedly, working with UUID was not a big challenge when we were working with the Model class, but in order to do it \u0026ldquo;nicely\u0026rdquo;, we had to use Model Events. Everything would be fine until our application itself would not need to use Model Events. Then it would be a mess, because we would have to add UUID support to our existing Events code.\nThat is why a special library was created, which extends Model class and gives possibility to work with UUID. No matter if we want to store identifiers as text or bytes - everything is handled automatically.\nInstallation via composer:\ncomposer require michalsn/codeigniter4-uuid Then the only change we need to make is in the Model:\nnamespace App\\Models; use Michalsn\\Uuid\\UuidModel; class MyModel extends UuidModel { ... } This is enough to use UUIDs automatically for the primary key.\n","permalink":"https://michalsn.dev/posts/uuid-with-codeigniter-4/","summary":"\u003cp\u003eUp until now, working with UUIDs and CodeIgniter 4 hasn\u0026rsquo;t been much fun, but that has now changed with the \u003ca href=\"https://github.com/michalsn/codeigniter4-uuid\"\u003ecodeigniter4-uuid\u003c/a\u003e library.\u003c/p\u003e","title":"UUID with CodeIgniter 4"}]